<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,
initial-scale=1.0">
<title>Biblioteca Digital</title>
<!-- Tailwind CSS -->
<script src="https://cdn.tailwindcss.com"></script>
<!-- Google Fonts: Inter -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com"
crossorigin>
<link
href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;7
00&display=swap" rel="stylesheet">
<!-- Font Awesome for icons -->
<link rel="stylesheet"
href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all
.min.css">
<style>
/* Custom styles */
body {
font-family: 'Inter', sans-serif;
background-color: #f1f5f9; /* slate-100 */
}
.book-card {
transition: transform 0.2s ease-in-out, box-shadow 0.2s
ease-in-out;
}
.book-card:hover {
transform: translateY(-5px);
box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px
-4px rgb(0 0 0 / 0.1);
}
.modal-backdrop {
background-color: rgba(0, 0, 0, 0.5);
}
.sidebar {
transition: transform 0.3s ease-in-out;
}

.genre-link.active {
background-color: #4f46e5; /* indigo-600 */
color: white;
}
</style>
</head>
<body class="text-slate-800">
<div class="flex h-screen bg-slate-100">
<!-- Sidebar -->
<aside id="sidebar" class="sidebar fixed inset-y-0 left-0
bg-white w-64 p-4 shadow-lg z-50 transform -translate-x-full
md:relative md:translate-x-0">
<div class="flex items-center space-x-3 mb-6">
<i class="fas fa-book-open text-3xl
text-indigo-600"></i>
<h1 class="text-xl font-bold
text-slate-800">Biblioteca</h1>
</div>
<nav>
<h2 class="text-sm font-semibold text-slate-500
uppercase tracking-wider mb-3">Gêneros</h2>
<ul id="genreList" class="space-y-1">
<li><a href="#" class="genre-link active flex
items-center px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Todos"><i class="fas fa-grip-horizontal w-6
text-center"></i><span>Todos</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Ficção Científica"><span>Ficção Científica</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Fantasia"><span>Fantasia</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Romance"><span>Romance</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Suspense"><span>Suspense</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Terror"><span>Terror</span></a></li>

<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Mistério"><span>Mistério</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Aventura"><span>Aventura</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Biografia"><span>Biografia</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="História"><span>História</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Autoajuda"><span>Autoajuda</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Negócios"><span>Negócios</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Poesia"><span>Poesia</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Clássicos"><span>Clássicos</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Infantil"><span>Infantil</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Jovem Adulto"><span>Jovem Adulto</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Distopia"><span>Distopia</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Policial"><span>Policial</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Humor"><span>Humor</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Culinária"><span>Culinária</span></a></li>

<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Filosofia"><span>Filosofia</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Drama"><span>Drama</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md" data-genre="Não
Ficção"><span>Não Ficção</span></a></li>
</ul>
</nav>
</aside>
<!-- Main Content -->
<div class="flex-1 flex flex-col overflow-hidden">
<!-- Header -->
<header class="bg-white shadow-md z-30">
<div class="container mx-auto px-6 py-3 flex
justify-between items-center">
<div class="flex items-center">
<button id="menuBtn" class="md:hidden
text-slate-600 mr-4">
<i class="fas fa-bars text-2xl"></i>
</button>

<div class="relative w-full max-w-xs">

<div class="absolute inset-y-0 left-0 pl-3
flex items-center pointer-events-none">
<i class="fas fa-search
text-slate-400"></i>
</div>

<input type="text" id="searchInput"
placeholder="Buscar por título ou autor..." class="w-full bg-slate-100
rounded-full py-2 pl-10 pr-4 border border-transparent focus:bg-white
focus:outline-none focus:ring-2 focus:ring-indigo-500">
</div>
</div>
<button id="addBookBtn" class="bg-indigo-600
hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg shadow-md
transition-transform transform hover:scale-105 flex items-center
space-x-2">
<i class="fas fa-plus"></i>
<span class="hidden sm:inline">Adicionar
Livro</span>

</button>
</div>
</header>
<!-- Content Area -->
<main class="flex-1 overflow-y-auto p-6">
<div id="loading" class="text-center py-10">
<i class="fas fa-spinner fa-spin text-4xl
text-indigo-500"></i>
<p class="mt-2 text-lg text-slate-600">Carregando
seus livros...</p>
</div>
<div id="emptyState" class="hidden text-center py-16
bg-white rounded-lg shadow">
<i class="fas fa-book-dead text-6xl
text-slate-400"></i>
<h2 id="emptyStateTitle" class="mt-4 text-2xl
font-semibold text-slate-700">Sua biblioteca está vazia</h2>
<p id="emptyStateMessage" class="mt-2
text-slate-500">Clique em "Adicionar Livro" para começar a sua
coleção.</p>
</div>
<div id="bookGrid" class="grid grid-cols-1
sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
<!-- Book cards will be inserted here -->
</div>
</main>
</div>
</div>
<!-- Modals (Password, Book, Confirmation) -->
<!-- Password Modal -->
<div id="passwordModal" class="fixed inset-0 z-50 flex items-center
justify-center modal-backdrop hidden">
<div class="bg-white rounded-lg shadow-2xl w-full max-w-sm mx-4
transform transition-all">
<form id="passwordForm" class="p-6">
<h2 class="text-xl font-bold mb-4">Acesso Restrito</h2>
<p class="text-slate-600 mb-4">Por favor, insira a
senha para adicionar um novo livro.</p>

<div id="passwordErrorMessage" class="hidden bg-red-100
border border-red-400 text-red-700 px-4 py-3 rounded-lg relative
mb-4"></div>
<div>
<label for="password" class="block text-sm
font-medium text-slate-700 mb-1">Senha</label>
<input type="password" id="password"
name="password" required class="w-full px-3 py-2 border
border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
</div>
<div class="mt-6 flex justify-end space-x-3">
<button type="button" id="cancelPasswordBtn"
class="bg-slate-100 hover:bg-slate-200 text-slate-700 font-bold py-2
px-4 rounded-lg">Cancelar</button>
<button type="submit" class="bg-indigo-600
hover:bg-indigo-700 text-white font-bold py-2 px-4
rounded-lg">Entrar</button>
</div>
</form>
</div>
</div>
<!-- Add/Edit Book Modal -->
<div id="bookModal" class="fixed inset-0 z-50 flex items-center
justify-center modal-backdrop hidden">
<div class="bg-white rounded-lg shadow-2xl w-full max-w-md mx-4
transform transition-all" id="modal-content">
<form id="bookForm" class="p-6">
<div class="flex justify-between items-center border-b
pb-3 mb-4">
<h2 class="text-2xl font-bold
text-slate-800">Adicionar Novo Livro</h2>
<button type="button" id="closeModalBtn"
class="text-slate-400 hover:text-slate-600">
<i class="fas fa-times fa-2x"></i>
</button>
</div>
<div id="errorMessage" class="hidden bg-red-100 border
border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-4"
role="alert">
<strong class="font-bold">Erro!</strong>

<span class="block sm:inline"
id="errorText"></span>
</div>
<div class="space-y-4">
<input type="text" id="title" name="title" required
placeholder="Título do Livro" class="w-full px-3 py-2 border
border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
<input type="text" id="author" name="author"
placeholder="Autor" class="w-full px-3 py-2 border border-slate-300
rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
<input type="text" id="genre" name="genre"
placeholder="Gênero" class="w-full px-3 py-2 border border-slate-300
rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
<input type="url" id="imageUrl" name="imageUrl"
placeholder="Link da Imagem da Capa (Opcional)" class="w-full px-3 py-2
border border-slate-300 rounded-md shadow-sm focus:outline-none
focus:ring-2 focus:ring-indigo-500">
<input type="url" id="link" name="link" required
placeholder="Link do Google Drive" class="w-full px-3 py-2 border
border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
</div>
<div class="mt-6 flex justify-end space-x-3">
<button type="button" id="cancelBtn"
class="bg-slate-100 hover:bg-slate-200 text-slate-700 font-bold py-2
px-4 rounded-lg">Cancelar</button>
<button type="submit" class="bg-indigo-600
hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg flex
items-center">
<span id="submitText">Salvar Livro</span>
<i id="submitSpinner" class="fas fa-spinner
fa-spin ml-2 hidden"></i>
</button>
</div>
</form>
</div>
</div>
<!-- Confirmation Modal -->

<div id="confirmModal" class="fixed inset-0 z-50 flex items-center
justify-center modal-backdrop hidden">
<div class="bg-white rounded-lg shadow-2xl w-full max-w-sm mx-4
p-6">
<h2 id="confirmTitle" class="text-xl font-bold
mb-4">Confirmar Remoção</h2>
<p id="confirmMessage" class="text-slate-600 mb-6">Você tem
certeza?</p>
<div class="flex justify-end space-x-3">
<button id="confirmCancelBtn" class="bg-slate-200
hover:bg-slate-300 text-slate-800 font-bold py-2 px-4
rounded-lg">Cancelar</button>
<button id="confirmOkBtn" class="bg-red-600
hover:bg-red-700 text-white font-bold py-2 px-4
rounded-lg">Remover</button>
</div>
</div>
</div>
<!-- Firebase -->
<script type="module">
import { initializeApp } from
"https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInAnonymously, onAuthStateChanged } from
"https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, collection, addDoc, onSnapshot, query,
doc, deleteDoc } from
"https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
const firebaseConfig = JSON.parse(typeof __firebase_config !==
'undefined' ? __firebase_config : '{}');
const appId = typeof __app_id !== 'undefined' ? __app_id :
'default-app-id';
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
let userId = null;
let unsubscribe = null;
let booksCache = [];
const ADMIN_PASSWORD = '20240614'; // Senha atualizada
let currentFilter = { genre: 'Todos', search: '' };

// UI Elements
const bookGrid = document.getElementById('bookGrid');
const loading = document.getElementById('loading');
const emptyState = document.getElementById('emptyState');
const emptyStateTitle =
document.getElementById('emptyStateTitle');
const emptyStateMessage =
document.getElementById('emptyStateMessage');
const addBookBtn = document.getElementById('addBookBtn');
const searchInput = document.getElementById('searchInput');
const genreList = document.getElementById('genreList');
const sidebar = document.getElementById('sidebar');
const menuBtn = document.getElementById('menuBtn');
const passwordModal = document.getElementById('passwordModal');
const passwordForm = document.getElementById('passwordForm');
const cancelPasswordBtn =
document.getElementById('cancelPasswordBtn');
const passwordErrorMessage =
document.getElementById('passwordErrorMessage');
const bookModal = document.getElementById('bookModal');
const bookForm = document.getElementById('bookForm');
const closeModalBtn = document.getElementById('closeModalBtn');
const cancelBtn = document.getElementById('cancelBtn');
const errorMessage = document.getElementById('errorMessage');
const errorText = document.getElementById('errorText');
const submitSpinner = document.getElementById('submitSpinner');
const submitText = document.getElementById('submitText');
let confirmCallback = null;
const confirmModal = document.getElementById('confirmModal');
const confirmMessage =
document.getElementById('confirmMessage');
const confirmCancelBtn =
document.getElementById('confirmCancelBtn');
const confirmOkBtn = document.getElementById('confirmOkBtn');
// --- Authentication ---
onAuthStateChanged(auth, (user) => {
if (user) {
userId = user.uid;

listenToBooks();
} else {
signInAnonymously(auth).catch(console.error);
}
});
// --- Modals ---
const openBookModal = () =>
bookModal.classList.remove('hidden');
const closeBookModal = () => {
bookModal.classList.add('hidden');
bookForm.reset();
hideError();
};
const openPasswordModal = () =>
passwordModal.classList.remove('hidden');
const closePasswordModal = () => {
passwordModal.classList.add('hidden');
passwordForm.reset();
passwordErrorMessage.classList.add('hidden');
};
const showConfirmModal = (message, onConfirm) => {
confirmMessage.textContent = message;
confirmCallback = onConfirm;
confirmModal.classList.remove('hidden');
};
const hideConfirmModal = () => {
confirmModal.classList.add('hidden');
confirmCallback = null;
};
// --- Error Handling ---
const displayError = (message) => {
errorText.textContent = message;
errorMessage.classList.remove('hidden');
};
const hideError = () => errorMessage.classList.add('hidden');
// --- Validation ---
const isValidGoogleDriveLink = (url) => {
try { return new URL(url).hostname === 'drive.google.com';
} catch { return false; }
};

const isValidUrl = (string) => {
try { new URL(string); return true; } catch { return false;
}
};
// --- Firestore ---
const addBook = async (bookData) => {
if (!userId) return displayError("Usuário não
autenticado.");
try {
const booksCollectionRef = collection(db,
`artifacts/${appId}/users/${userId}/books`);
await addDoc(booksCollectionRef, bookData);
closeBookModal();
} catch (error) {
console.error("Erro ao adicionar livro:", error);
displayError("Ocorreu um erro ao salvar o livro.");
}
};
const deleteBook = (bookId) => {
showConfirmModal("Tem certeza que deseja remover este
livro?", async () => {
if (!userId) return;
try {
const bookDocRef = doc(db,
`artifacts/${appId}/users/${userId}/books`, bookId);
await deleteDoc(bookDocRef);
} catch (error) {
console.error("Erro ao remover livro:", error);
}
});
};
// --- Rendering ---
const renderBooks = (books) => {
loading.classList.add('hidden');
bookGrid.innerHTML = '';
if (books.length === 0) {
emptyState.classList.remove('hidden');
bookGrid.classList.add('hidden');

if (currentFilter.search || currentFilter.genre !==
'Todos') {
emptyStateTitle.textContent = "Nenhum livro
encontrado";
emptyStateMessage.textContent = "Tente ajustar sua
busca ou filtro de gênero.";
} else {
emptyStateTitle.textContent = "Sua biblioteca está
vazia";
emptyStateMessage.textContent = "Clique em
'Adicionar Livro' para começar sua coleção.";
}
} else {
emptyState.classList.add('hidden');
bookGrid.classList.remove('hidden');
}
books.forEach(book => {
const card = document.createElement('div');
card.className = 'book-card bg-white rounded-lg
shadow-lg overflow-hidden flex flex-col';
const titleEncoded = encodeURIComponent(book.title ||
'Livro');
const placeholderUrl =
`https://placehold.co/400x600/e0e7ff/3730a3?text=${titleEncoded}`;
const imageUrl = book.imageUrl || placeholderUrl;
card.innerHTML = `
<div class="h-64 w-full bg-slate-200 flex
items-center justify-center overflow-hidden">
<img src="${imageUrl}" alt="Capa de
${book.title}" class="h-full w-full object-cover"
onerror="this.onerror=null;this.src='${placeholderUrl}';">
</div>
<div class="p-5 flex-grow flex flex-col">
<h3 class="text-xl font-bold text-slate-800
truncate" title="${book.title || ''}">${book.title || 'Sem
Título'}</h3>
<p class="text-slate-600 mt-1 truncate"
title="${book.author || ''}">${book.author || 'Autor Desconhecido'}</p>
<div class="flex-grow"></div>

<span class="inline-block bg-indigo-100
text-indigo-800 text-xs font-semibold mt-3 px-2.5 py-0.5 rounded-full
self-start">${book.genre || 'Sem Gênero'}</span>
</div>
<div class="p-4 bg-slate-50 border-t
border-slate-200 flex justify-between items-center">
<a href="${book.link}" target="_blank"
rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-800
font-semibold flex items-center space-x-2">
<i class="fas
fa-external-link-alt"></i><span>Abrir</span>
</a>

<button data-id="${book.id}" class="delete-btn

text-red-500 hover:text-red-700"><i class="fas fa-trash-alt
fa-lg"></i></button>
</div>
`;
bookGrid.appendChild(card);
});
};
const applyFilters = () => {
let filteredBooks = [...booksCache];
if (currentFilter.genre !== 'Todos') {
filteredBooks = filteredBooks.filter(book => book.genre
=== currentFilter.genre);
}
if (currentFilter.search) {
const searchTerm = currentFilter.search.toLowerCase();
filteredBooks = filteredBooks.filter(book =>
(book.title &&
book.title.toLowerCase().includes(searchTerm)) ||
(book.author &&
book.author.toLowerCase().includes(searchTerm))
);
}
renderBooks(filteredBooks);
};
// --- Firestore Listener ---
const listenToBooks = () => {

if (unsubscribe) unsubscribe();
if (!userId) return;
const booksCollectionRef = collection(db,
`artifacts/${appId}/users/${userId}/books`);
const q = query(booksCollectionRef);
unsubscribe = onSnapshot(q, (querySnapshot) => {
booksCache = querySnapshot.docs.map(doc => ({ id:
doc.id, ...doc.data() }));
applyFilters();
}, (error) => {
console.error("Erro ao buscar livros:", error);
loading.classList.add('hidden');
});
};
// --- Event Listeners ---
addBookBtn.addEventListener('click', openPasswordModal);
menuBtn.addEventListener('click', () => {
sidebar.classList.toggle('-translate-x-full');
});
passwordForm.addEventListener('submit', (e) => {
e.preventDefault();
if (passwordForm.password.value === ADMIN_PASSWORD) {
closePasswordModal();
openBookModal();
} else {
passwordErrorMessage.textContent = "Senha incorreta.";
passwordErrorMessage.classList.remove('hidden');
}
});
cancelPasswordBtn.addEventListener('click',
closePasswordModal);
closeModalBtn.addEventListener('click', closeBookModal);
cancelBtn.addEventListener('click', closeBookModal);
bookModal.addEventListener('click', (e) => { if (e.target ===
bookModal) closeBookModal(); });
bookForm.addEventListener('submit', async (e) => {

e.preventDefault();
hideError();
const [title, link, imageUrl] =
[bookForm.title.value.trim(), bookForm.link.value.trim(),
bookForm.imageUrl.value.trim()];
if (!title || !link) return displayError("Título e Link são
obrigatórios.");
if (!isValidGoogleDriveLink(link)) return
displayError("Link do Google Drive inválido.");
if (imageUrl && !isValidUrl(imageUrl)) return
displayError("Link da imagem inválido.");
submitSpinner.classList.remove('hidden');
submitText.textContent = 'Salvando...';
await addBook({ title, author:
bookForm.author.value.trim(), genre: bookForm.genre.value.trim(), link,
imageUrl });
submitSpinner.classList.add('hidden');
submitText.textContent = 'Salvar Livro';
});
bookGrid.addEventListener('click', (e) => {
const deleteButton = e.target.closest('.delete-btn');
if (deleteButton) deleteBook(deleteButton.dataset.id);
});
confirmCancelBtn.addEventListener('click', hideConfirmModal);
confirmOkBtn.addEventListener('click', () => {
if (confirmCallback) confirmCallback();
hideConfirmModal();
});
searchInput.addEventListener('input', (e) => {
currentFilter.search = e.target.value;
applyFilters();
});
genreList.addEventListener('click', (e) => {
e.preventDefault();
const link = e.target.closest('.genre-link');
if (link) {
<!DOCTYPE html>
<html lang="pt-BR">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,
initial-scale=1.0">
<title>Biblioteca Digital</title>
<!-- Tailwind CSS -->
<script src="https://cdn.tailwindcss.com"></script>
<!-- Google Fonts: Inter -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com"
crossorigin>
<link
href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;7
00&display=swap" rel="stylesheet">
<!-- Font Awesome for icons -->
<link rel="stylesheet"
href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all
.min.css">
<style>
/* Custom styles */
body {
font-family: 'Inter', sans-serif;
background-color: #f1f5f9; /* slate-100 */
}
.book-card {
transition: transform 0.2s ease-in-out, box-shadow 0.2s
ease-in-out;
}
.book-card:hover {
transform: translateY(-5px);
box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px
-4px rgb(0 0 0 / 0.1);
}
.modal-backdrop {
background-color: rgba(0, 0, 0, 0.5);
}
.sidebar {
transition: transform 0.3s ease-in-out;
}
.genre-link.active {
background-color: #4f46e5; /* indigo-600 */
color: white;
}

</style>
</head>
<body class="text-slate-800">
<div class="flex h-screen bg-slate-100">
<!-- Sidebar -->
<aside id="sidebar" class="sidebar fixed inset-y-0 left-0
bg-white w-64 p-4 shadow-lg z-50 transform -translate-x-full
md:relative md:translate-x-0">
<div class="flex items-center space-x-3 mb-6">
<i class="fas fa-book-open text-3xl
text-indigo-600"></i>
<h1 class="text-xl font-bold
text-slate-800">Biblioteca</h1>
</div>
<nav>
<h2 class="text-sm font-semibold text-slate-500
uppercase tracking-wider mb-3">Gêneros</h2>
<ul id="genreList" class="space-y-1">
<li><a href="#" class="genre-link active flex
items-center px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Todos"><i class="fas fa-grip-horizontal w-6
text-center"></i><span>Todos</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Ficção Científica"><span>Ficção Científica</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Fantasia"><span>Fantasia</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Romance"><span>Romance</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Suspense"><span>Suspense</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Terror"><span>Terror</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Mistério"><span>Mistério</span></a></li>

<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md"
data-genre="Drama"><span>Drama</span></a></li>
<li><a href="#" class="genre-link flex items-center
px-3 py-2 text-slate-700 hover:bg-indigo-50 rounded-md" data-genre="Não
Ficção"><span>Não Ficção</span></a></li>
</ul>
</nav>
</aside>
<!-- Main Content -->
<div class="flex-1 flex flex-col overflow-hidden">
<!-- Header -->
<header class="bg-white shadow-md z-30">
<div class="container mx-auto px-6 py-3 flex
justify-between items-center">
<div class="flex items-center">
<button id="menuBtn" class="md:hidden
text-slate-600 mr-4">
<i class="fas fa-bars text-2xl"></i>
</button>

<div class="relative w-full max-w-xs">

<div class="absolute inset-y-0 left-0 pl-3
flex items-center pointer-events-none">
<i class="fas fa-search
text-slate-400"></i>
</div>

<input type="text" id="searchInput"
placeholder="Buscar por título ou autor..." class="w-full bg-slate-100
rounded-full py-2 pl-10 pr-4 border border-transparent focus:bg-white
focus:outline-none focus:ring-2 focus:ring-indigo-500">
</div>
</div>
<button id="addBookBtn" class="bg-indigo-600
hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg shadow-md
transition-transform transform hover:scale-105 flex items-center
space-x-2">
<i class="fas fa-plus"></i>
<span class="hidden sm:inline">Adicionar
Livro</span>
</button>
</div>
</header>

<!-- Content Area -->
<main class="flex-1 overflow-y-auto p-6">
<div id="loading" class="text-center py-10">
<i class="fas fa-spinner fa-spin text-4xl
text-indigo-500"></i>
<p class="mt-2 text-lg text-slate-600">Carregando
seus livros...</p>
</div>
<div id="emptyState" class="hidden text-center py-16
bg-white rounded-lg shadow">
<i class="fas fa-book-dead text-6xl
text-slate-400"></i>
<h2 id="emptyStateTitle" class="mt-4 text-2xl
font-semibold text-slate-700">Sua biblioteca está vazia</h2>
<p id="emptyStateMessage" class="mt-2
text-slate-500">Clique em "Adicionar Livro" para começar a sua
coleção.</p>
</div>
<div id="bookGrid" class="grid grid-cols-1
sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
<!-- Book cards will be inserted here -->
</div>
</main>
</div>
</div>
<!-- Modals (Password, Book, Confirmation) -->
<!-- Password Modal -->
<div id="passwordModal" class="fixed inset-0 z-50 flex items-center
justify-center modal-backdrop hidden">
<div class="bg-white rounded-lg shadow-2xl w-full max-w-sm mx-4
transform transition-all">
<form id="passwordForm" class="p-6">
<h2 class="text-xl font-bold mb-4">Acesso Restrito</h2>
<p class="text-slate-600 mb-4">Por favor, insira a
senha para adicionar um novo livro.</p>
<div id="passwordErrorMessage" class="hidden bg-red-100
border border-red-400 text-red-700 px-4 py-3 rounded-lg relative
mb-4"></div>
<div>

<label for="password" class="block text-sm
font-medium text-slate-700 mb-1">Senha</label>
<input type="password" id="password"
name="password" required class="w-full px-3 py-2 border
border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
</div>
<div class="mt-6 flex justify-end space-x-3">
<button type="button" id="cancelPasswordBtn"
class="bg-slate-100 hover:bg-slate-200 text-slate-700 font-bold py-2
px-4 rounded-lg">Cancelar</button>
<button type="submit" class="bg-indigo-600
hover:bg-indigo-700 text-white font-bold py-2 px-4
rounded-lg">Entrar</button>
</div>
</form>
</div>
</div>
<!-- Add/Edit Book Modal -->
<div id="bookModal" class="fixed inset-0 z-50 flex items-center
justify-center modal-backdrop hidden">
<div class="bg-white rounded-lg shadow-2xl w-full max-w-md mx-4
transform transition-all" id="modal-content">
<form id="bookForm" class="p-6">
<div class="flex justify-between items-center border-b
pb-3 mb-4">
<h2 class="text-2xl font-bold
text-slate-800">Adicionar Novo Livro</h2>
<button type="button" id="closeModalBtn"
class="text-slate-400 hover:text-slate-600">
<i class="fas fa-times fa-2x"></i>
</button>
</div>
<div id="errorMessage" class="hidden bg-red-100 border
border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-4"
role="alert">
<strong class="font-bold">Erro!</strong>
<span class="block sm:inline"
id="errorText"></span>
</div>
<div class="space-y-4">

<input type="text" id="title" name="title" required
placeholder="Título do Livro" class="w-full px-3 py-2 border
border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
<input type="text" id="author" name="author"
placeholder="Autor" class="w-full px-3 py-2 border border-slate-300
rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
<input type="text" id="genre" name="genre"
placeholder="Gênero" class="w-full px-3 py-2 border border-slate-300
rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
<input type="url" id="imageUrl" name="imageUrl"
placeholder="Link da Imagem da Capa (Opcional)" class="w-full px-3 py-2
border border-slate-300 rounded-md shadow-sm focus:outline-none
focus:ring-2 focus:ring-indigo-500">
<input type="url" id="link" name="link" required
placeholder="Link do Google Drive" class="w-full px-3 py-2 border
border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-2
focus:ring-indigo-500">
</div>
<div class="mt-6 flex justify-end space-x-3">
<button type="button" id="cancelBtn"
class="bg-slate-100 hover:bg-slate-200 text-slate-700 font-bold py-2
px-4 rounded-lg">Cancelar</button>
<button type="submit" class="bg-indigo-600
hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg flex
items-center">
<span id="submitText">Salvar Livro</span>
<i id="submitSpinner" class="fas fa-spinner
fa-spin ml-2 hidden"></i>
</button>
</div>
</form>
</div>
</div>
<!-- Confirmation Modal -->
<div id="confirmModal" class="fixed inset-0 z-50 flex items-center
justify-center modal-backdrop hidden">
<div class="bg-white rounded-lg shadow-2xl w-full max-w-sm mx-4
p-6">

<h2 id="confirmTitle" class="text-xl font-bold
mb-4">Confirmar Remoção</h2>
<p id="confirmMessage" class="text-slate-600 mb-6">Você tem
certeza?</p>
<div class="flex justify-end space-x-3">
<button id="confirmCancelBtn" class="bg-slate-200
hover:bg-slate-300 text-slate-800 font-bold py-2 px-4
rounded-lg">Cancelar</button>
<button id="confirmOkBtn" class="bg-red-600
hover:bg-red-700 text-white font-bold py-2 px-4
rounded-lg">Remover</button>
</div>
</div>
</div>
<!-- Firebase -->
<script type="module">
import { initializeApp } from
"https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInAnonymously, onAuthStateChanged } from
"https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, collection, addDoc, onSnapshot, query,
doc, deleteDoc } from
"https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
const firebaseConfig = JSON.parse(typeof __firebase_config !==
'undefined' ? __firebase_config : '{}');
const appId = typeof __app_id !== 'undefined' ? __app_id :
'default-app-id';
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
let userId = null;
let unsubscribe = null;
let booksCache = [];
const ADMIN_PASSWORD = '20240614'; // Senha atualizada
let currentFilter = { genre: 'Todos', search: '' };
// UI Elements
const bookGrid = document.getElementById('bookGrid');
const loading = document.getElementById('loading');

const emptyState = document.getElementById('emptyState');
const emptyStateTitle =
document.getElementById('emptyStateTitle');
const emptyStateMessage =
document.getElementById('emptyStateMessage');
const addBookBtn = document.getElementById('addBookBtn');
const searchInput = document.getElementById('searchInput');
const genreList = document.getElementById('genreList');
const sidebar = document.getElementById('sidebar');
const menuBtn = document.getElementById('menuBtn');
const passwordModal = document.getElementById('passwordModal');
const passwordForm = document.getElementById('passwordForm');
const cancelPasswordBtn =
document.getElementById('cancelPasswordBtn');
const passwordErrorMessage =
document.getElementById('passwordErrorMessage');
const bookModal = document.getElementById('bookModal');
const bookForm = document.getElementById('bookForm');
const closeModalBtn = document.getElementById('closeModalBtn');
const cancelBtn = document.getElementById('cancelBtn');
const errorMessage = document.getElementById('errorMessage');
const errorText = document.getElementById('errorText');
const submitSpinner = document.getElementById('submitSpinner');
const submitText = document.getElementById('submitText');
let confirmCallback = null;
const confirmModal = document.getElementById('confirmModal');
const confirmMessage =
document.getElementById('confirmMessage');
const confirmCancelBtn =
document.getElementById('confirmCancelBtn');
const confirmOkBtn = document.getElementById('confirmOkBtn');
// --- Authentication ---
onAuthStateChanged(auth, (user) => {
if (user) {
userId = user.uid;
listenToBooks();
} else {
signInAnonymously(auth).catch(console.error);
}

});
// --- Modals ---
const openBookModal = () =>
bookModal.classList.remove('hidden');
const closeBookModal = () => {
bookModal.classList.add('hidden');
bookForm.reset();
hideError();
};
const openPasswordModal = () =>
passwordModal.classList.remove('hidden');
const closePasswordModal = () => {
passwordModal.classList.add('hidden');
passwordForm.reset();
passwordErrorMessage.classList.add('hidden');
};
const showConfirmModal = (message, onConfirm) => {
confirmMessage.textContent = message;
confirmCallback = onConfirm;
confirmModal.classList.remove('hidden');
};
const hideConfirmModal = () => {
confirmModal.classList.add('hidden');
confirmCallback = null;
};
// --- Error Handling ---
const displayError = (message) => {
errorText.textContent = message;
errorMessage.classList.remove('hidden');
};
const hideError = () => errorMessage.classList.add('hidden');
// --- Validation ---
const isValidGoogleDriveLink = (url) => {
try { return new URL(url).hostname === 'drive.google.com';
} catch { return false; }
};
const isValidUrl = (string) => {
try { new URL(string); return true; } catch { return false;
}
};

// --- Firestore ---
const addBook = async (bookData) => {
if (!userId) return displayError("Usuário não
autenticado.");
try {
const booksCollectionRef = collection(db,
`artifacts/${appId}/users/${userId}/books`);
await addDoc(booksCollectionRef, bookData);
closeBookModal();
} catch (error) {
console.error("Erro ao adicionar livro:", error);
displayError("Ocorreu um erro ao salvar o livro.");
}
};
const deleteBook = (bookId) => {
showConfirmModal("Tem certeza que deseja remover este
livro?", async () => {
if (!userId) return;
try {
const bookDocRef = doc(db,
`artifacts/${appId}/users/${userId}/books`, bookId);
await deleteDoc(bookDocRef);
} catch (error) {
console.error("Erro ao remover livro:", error);
}
});
};
// --- Rendering ---
const renderBooks = (books) => {
loading.classList.add('hidden');
bookGrid.innerHTML = '';
if (books.length === 0) {
emptyState.classList.remove('hidden');
bookGrid.classList.add('hidden');
if (currentFilter.search || currentFilter.genre !==
'Todos') {
emptyStateTitle.textContent = "Nenhum livro
encontrado";

emptyStateMessage.textContent = "Tente ajustar sua
busca ou filtro de gênero.";
} else {
emptyStateTitle.textContent = "Sua biblioteca está
vazia";
emptyStateMessage.textContent = "Clique em
'Adicionar Livro' para começar sua coleção.";
}
} else {
emptyState.classList.add('hidden');
bookGrid.classList.remove('hidden');
}
books.forEach(book => {
const card = document.createElement('div');
card.className = 'book-card bg-white rounded-lg
shadow-lg overflow-hidden flex flex-col';
const titleEncoded = encodeURIComponent(book.title ||
'Livro');
const placeholderUrl =
`https://placehold.co/400x600/e0e7ff/3730a3?text=${titleEncoded}`;
const imageUrl = book.imageUrl || placeholderUrl;
card.innerHTML = `
<div class="h-64 w-full bg-slate-200 flex
items-center justify-center overflow-hidden">
<img src="${imageUrl}" alt="Capa de
${book.title}" class="h-full w-full object-cover"
onerror="this.onerror=null;this.src='${placeholderUrl}';">
</div>
<div class="p-5 flex-grow flex flex-col">
<h3 class="text-xl font-bold text-slate-800
truncate" title="${book.title || ''}">${book.title || 'Sem
Título'}</h3>
<p class="text-slate-600 mt-1 truncate"
title="${book.author || ''}">${book.author || 'Autor Desconhecido'}</p>
<div class="flex-grow"></div>

<span class="inline-block bg-indigo-100
text-indigo-800 text-xs font-semibold mt-3 px-2.5 py-0.5 rounded-full
self-start">${book.genre || 'Sem Gênero'}</span>
</div>
<div class="p-4 bg-slate-50 border-t
border-slate-200 flex justify-between items-center">

<a href="${book.link}" target="_blank"
rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-800
font-semibold flex items-center space-x-2">
<i class="fas
fa-external-link-alt"></i><span>Abrir</span>
</a>

<button data-id="${book.id}" class="delete-btn

text-red-500 hover:text-red-700"><i class="fas fa-trash-alt
fa-lg"></i></button>
</div>
`;
bookGrid.appendChild(card);
});
};
const applyFilters = () => {
let filteredBooks = [...booksCache];
if (currentFilter.genre !== 'Todos') {
filteredBooks = filteredBooks.filter(book => book.genre
=== currentFilter.genre);
}
if (currentFilter.search) {
const searchTerm = currentFilter.search.toLowerCase();
filteredBooks = filteredBooks.filter(book =>
(book.title &&
book.title.toLowerCase().includes(searchTerm)) ||
(book.author &&
book.author.toLowerCase().includes(searchTerm))
);
}
renderBooks(filteredBooks);
};
// --- Firestore Listener ---
const listenToBooks = () => {
if (unsubscribe) unsubscribe();
if (!userId) return;
const booksCollectionRef = collection(db,
`artifacts/${appId}/users/${userId}/books`);
const q = query(booksCollectionRef);

unsubscribe = onSnapshot(q, (querySnapshot) => {
booksCache = querySnapshot.docs.map(doc => ({ id:
doc.id, ...doc.data() }));
applyFilters();
}, (error) => {
console.error("Erro ao buscar livros:", error);
loading.classList.add('hidden');
});
};
// --- Event Listeners ---
addBookBtn.addEventListener('click', openPasswordModal);
menuBtn.addEventListener('click', () => {
sidebar.classList.toggle('-translate-x-full');
});
passwordForm.addEventListener('submit', (e) => {
e.preventDefault();
if (passwordForm.password.value === ADMIN_PASSWORD) {
closePasswordModal();
openBookModal();
} else {
passwordErrorMessage.textContent = "Senha incorreta.";
passwordErrorMessage.classList.remove('hidden');
}
});
cancelPasswordBtn.addEventListener('click',
closePasswordModal);
closeModalBtn.addEventListener('click', closeBookModal);
cancelBtn.addEventListener('click', closeBookModal);
bookModal.addEventListener('click', (e) => { if (e.target ===
bookModal) closeBookModal(); });
bookForm.addEventListener('submit', async (e) => {
e.preventDefault();
hideError();
const [title, link, imageUrl] =
[bookForm.title.value.trim(), bookForm.link.value.trim(),
bookForm.imageUrl.value.trim()];

if (!title || !link) return displayError("Título e Link são
obrigatórios.");
if (!isValidGoogleDriveLink(link)) return
displayError("Link do Google Drive inválido.");
if (imageUrl && !isValidUrl(imageUrl)) return
displayError("Link da imagem inválido.");
submitSpinner.classList.remove('hidden');
submitText.textContent = 'Salvando...';
await addBook({ title, author:
bookForm.author.value.trim(), genre: bookForm.genre.value.trim(), link,
imageUrl });
submitSpinner.classList.add('hidden');
submitText.textContent = 'Salvar Livro';
});
bookGrid.addEventListener('click', (e) => {
const deleteButton = e.target.closest('.delete-btn');
if (deleteButton) deleteBook(deleteButton.dataset.id);
});
confirmCancelBtn.addEventListener('click', hideConfirmModal);
confirmOkBtn.addEventListener('click', () => {
if (confirmCallback) confirmCallback();
hideConfirmModal();
});
searchInput.addEventListener('input', (e) => {
currentFilter.search = e.target.value;
applyFilters();
});
genreList.addEventListener('click', (e) => {
e.preventDefault();
const link = e.target.closest('.genre-link');
if (link) {
document.querySelector('.genre-link.active').classList.remove('active')
;
link.classList.add('active');
currentFilter.genre = link.dataset.genre;
applyFilters();

if (sidebar.classList.contains('-translate-x-full') ===
false && window.innerWidth < 768) {
sidebar.classList.add('-translate-x-full');
}
}
});
</script>
</body>
</html>
document.querySelector('.genre-link.active').classList.remove('active')
;
link.classList.add('active');
currentFilter.genre = link.dataset.genre;
applyFilters();
if (sidebar.classList.contains('-translate-x-full') ===
false && window.innerWidth < 768) {
sidebar.classList.add('-translate-x-full');
}
}
});
</script>
</body>
</html>
